digraph "classes" {
rankdir=BT
charset="utf-8"
"flask.ctx.AppContext" [color="black", fontcolor="black", label="{AppContext|app : str\lg\lurl_adapter\l|pop(exc: t.Optional[BaseException]): None\lpush(): None\l}", shape="record", style="solid"];
"flask.app_group.AppGroup" [color="black", fontcolor="black", label="{AppGroup|\l|command()\lgroup()\l}", shape="record", style="solid"];
"flask.cli.AppGroup" [color="black", fontcolor="black", label="{AppGroup|name\l|command()\lgroup()\l}", shape="record", style="solid"];
"flask.testing.AppTestingUtil" [color="black", fontcolor="black", label="{AppTestingUtil|flask_app\ltest_cli_runner_class : Optional[t.Optional[t.Type['FlaskCliRunner']]]\ltest_client_class : Optional[t.Optional[t.Type['FlaskClient']]]\l|test_cli_runner(): 'FlaskCliRunner'\ltest_client(use_cookies: bool): 'FlaskClient'\ltest_request_context(): RequestContext\l}", shape="record", style="solid"];
"flask.blueprints.Blueprint" [color="black", fontcolor="black", label="{Blueprint|cli_group : t.Optional[str]\ldeferred_functions : t.List[DeferredSetupFunction]\ljson_decoder\ljson_encoder\lname : str\lsubdomain : Optional[t.Optional[str]]\lurl_prefix : Optional[t.Optional[str]]\lurl_values_defaults : Optional[t.Optional[dict]]\l|add_app_template_filter(f: ft.TemplateFilterCallable, name: t.Optional[str]): None\ladd_app_template_global(f: ft.TemplateGlobalCallable, name: t.Optional[str]): None\ladd_app_template_test(f: ft.TemplateTestCallable, name: t.Optional[str]): None\ladd_url_rule(rule: str, endpoint: t.Optional[str], view_func: t.Optional[ft.RouteCallable], provide_automatic_options: t.Optional[bool]): None\lafter_app_request(f: T_after_request): T_after_request\lapp_context_processor(f: T_template_context_processor): T_template_context_processor\lapp_errorhandler(code: t.Union[t.Type[Exception], int]): t.Callable[[T_error_handler], T_error_handler]\lapp_template_filter(name: t.Optional[str]): t.Callable[[T_template_filter], T_template_filter]\lapp_template_global(name: t.Optional[str]): t.Callable[[T_template_global], T_template_global]\lapp_template_test(name: t.Optional[str]): t.Callable[[T_template_test], T_template_test]\lapp_url_defaults(f: T_url_defaults): T_url_defaults\lapp_url_value_preprocessor(f: T_url_value_preprocessor): T_url_value_preprocessor\lbefore_app_first_request(f: T_before_first_request): T_before_first_request\lbefore_app_request(f: T_before_request): T_before_request\lmake_setup_state(app: 'Flask', options: dict, first_registration: bool): BlueprintSetupState\lrecord(func: t.Callable): None\lrecord_once(func: t.Callable): None\lregister(app: 'Flask', options: dict): None\lregister_blueprint(blueprint: 'Blueprint'): None\lteardown_app_request(f: T_teardown): T_teardown\l}", shape="record", style="solid"];
"flask.blueprints.BlueprintSetupState" [color="black", fontcolor="black", label="{BlueprintSetupState|app : str\lblueprint : str\lfirst_registration : bool\lname\lname_prefix\loptions\lsubdomain\lurl_defaults : dict\lurl_prefix\l|add_url_rule(rule: str, endpoint: t.Optional[str], view_func: t.Optional[t.Callable]): None\l}", shape="record", style="solid"];
"flask.cli.CertParamType" [color="black", fontcolor="black", label="{CertParamType|name : str\lpath_type\l|convert(value, param, ctx)\l}", shape="record", style="solid"];
"flask.config.Config" [color="black", fontcolor="black", label="{Config|root_path : str\l|from_envvar(variable_name: str, silent: bool): bool\lfrom_file(filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool): bool\lfrom_mapping(mapping: t.Optional[t.Mapping[str, t.Any]]): bool\lfrom_object(obj: t.Union[object, str]): None\lfrom_prefixed_env(prefix: str): bool\lfrom_pyfile(filename: str, silent: bool): bool\lget_namespace(namespace: str, lowercase: bool, trim_namespace: bool): t.Dict[str, t.Any]\l}", shape="record", style="solid"];
"flask.config.ConfigAttribute" [color="black", fontcolor="black", label="{ConfigAttribute|get_converter : Optional[t.Optional[t.Callable]]\l|}", shape="record", style="solid"];
"flask.debughelpers.DebugFilesKeyError" [color="black", fontcolor="red", label="{DebugFilesKeyError|msg : str\l|}", shape="record", style="solid"];
"flask.json.provider.DefaultJSONProvider" [color="black", fontcolor="black", label="{DefaultJSONProvider|compact : Optional[bool \| None]\ldefault : t.Callable[[t.Any], t.Any]\lensure_ascii : bool\lmimetype : str\lsort_keys : bool\l|dumps(obj: t.Any): str\lloads(s: str | bytes): t.Any\lresponse(): Response\l}", shape="record", style="solid"];
"flask.templating.DispatchingJinjaLoader" [color="black", fontcolor="black", label="{DispatchingJinjaLoader|app : str\l|get_source(environment: Environment, template: str): t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]\llist_templates(): t.List[str]\l}", shape="record", style="solid"];
"flask.testing.EnvironBuilder" [color="black", fontcolor="black", label="{EnvironBuilder|app : str\l|json_dumps(obj: t.Any): str\l}", shape="record", style="solid"];
"flask.templating.Environment" [color="black", fontcolor="black", label="{Environment|app : str\l|}", shape="record", style="solid"];
"flask.app.Flask" [color="black", fontcolor="black", label="{Flask|aborter\laborter_class\lapp_ctx_globals_class\lbefore_first_request_funcs : t.List[ft.BeforeFirstRequestCallable]\lblueprints : t.Dict[str, 'Blueprint']\lconfig\lconfig_class\ldebug\ldebug : bool\ldefault_config\lenv\lextensions : dict\lgot_first_request\linstance_path : Optional[t.Optional[str]]\ljinja_environment\ljinja_options : dict\ljson\ljson_decoder\ljson_encoder\ljson_provider_class : t.Type[JSONProvider]\lpermanent_session_lifetime\lpropagate_exceptions\lrequest_class\lresponse_class\lsecret_key\lsend_file_max_age_default\lsession_cookie_name\lsession_interface\lshell_context_processors : t.List[ft.ShellContextProcessorCallable]\lsubdomain_matching : bool\lteardown_appcontext_funcs : t.List[ft.TeardownCallable]\ltemplates_auto_reload\ltesting\lurl_build_error_handlers : t.List[t.Callable[[Exception, str, t.Dict[str, t.Any]], str]]\lurl_map\lurl_map_class\lurl_rule_class\luse_x_sendfile\l|add_template_filter(f: ft.TemplateFilterCallable, name: t.Optional[str]): None\ladd_template_global(f: ft.TemplateGlobalCallable, name: t.Optional[str]): None\ladd_template_test(f: ft.TemplateTestCallable, name: t.Optional[str]): None\ladd_url_rule(rule: str, endpoint: t.Optional[str], view_func: t.Optional[ft.RouteCallable], provide_automatic_options: t.Optional[bool]): None\lapp_context(): AppContext\lasync_to_sync(func: t.Callable[..., t.Coroutine]): t.Callable[..., t.Any]\lauto_find_instance_path(): str\lbefore_first_request(f: T_before_first_request): T_before_first_request\lcreate_global_jinja_loader(): DispatchingJinjaLoader\lcreate_jinja_environment(): Environment\lcreate_url_adapter(request: t.Optional[Request]): t.Optional[MapAdapter]\ldispatch_request(): ft.ResponseReturnValue\ldo_teardown_appcontext(exc: t.Optional[BaseException]): None\ldo_teardown_request(exc: t.Optional[BaseException]): None\lensure_sync(func: t.Callable): t.Callable\lfinalize_request(rv: t.Union[ft.ResponseReturnValue, HTTPException], from_error_handler: bool): Response\lfull_dispatch_request(): Response\lhandle_exception(e: Exception): Response\lhandle_http_exception(e: HTTPException): t.Union[HTTPException, ft.ResponseReturnValue]\lhandle_url_build_error(error: BuildError, endpoint: str, values: t.Dict[str, t.Any]): str\lhandle_user_exception(e: Exception): t.Union[HTTPException, ft.ResponseReturnValue]\linject_url_defaults(endpoint: str, values: dict): None\liter_blueprints(): t.ValuesView['Blueprint']\ljinja_env(): Environment\llog_exception(exc_info: t.Union[t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]]): None\llogger(): logging.Logger\lmake_aborter(): Aborter\lmake_config(instance_relative: bool): Config\lmake_default_options_response(): Response\lmake_response(rv: ft.ResponseReturnValue): Response\lmake_shell_context(): dict\lname(): str\lopen_instance_resource(resource: str, mode: str): t.IO[t.AnyStr]\lpreprocess_request(): t.Optional[ft.ResponseReturnValue]\lprocess_response(response: Response): Response\lraise_routing_exception(request: Request): 'te.NoReturn'\lredirect(location: str, code: int): BaseResponse\lregister_blueprint(blueprint: 'Blueprint'): None\lrequest_context(environ: dict): RequestContext\lrun(host: t.Optional[str], port: t.Optional[int], debug: t.Optional[bool], load_dotenv: bool): None\lselect_jinja_autoescape(filename: str): bool\lshell_context_processor(f: T_shell_context_processor): T_shell_context_processor\lshould_ignore_error(error: t.Optional[BaseException]): bool\lteardown_appcontext(f: T_teardown): T_teardown\ltemplate_filter(name: t.Optional[str]): t.Callable[[T_template_filter], T_template_filter]\ltemplate_global(name: t.Optional[str]): t.Callable[[T_template_global], T_template_global]\ltemplate_test(name: t.Optional[str]): t.Callable[[T_template_test], T_template_test]\ltrap_http_exception(e: Exception): bool\lupdate_template_context(context: dict): None\lurl_for(endpoint: str): str\lwsgi_app(environ: dict, start_response: t.Callable): t.Any\l}", shape="record", style="solid"];
"flask.testing.FlaskCliRunner" [color="black", fontcolor="black", label="{FlaskCliRunner|app : str\l|invoke(cli: t.Any, args: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.testing.FlaskClient" [color="black", fontcolor="black", label="{FlaskClient|application : str\lenviron_base : dict\lpreserve_context : bool\l|open(): 'TestResponse'\lsession_transaction(): t.Generator[SessionMixin, None, None]\l}", shape="record", style="solid"];
"flask.cli.FlaskGroup" [color="black", fontcolor="black", label="{FlaskGroup|create_app : Optional[t.Callable[..., 'Flask'] \| None]\lload_dotenv : bool\lset_debug_flag : bool\l|get_command(ctx, name)\llist_commands(ctx)\lmake_context(info_name: str | None, args: list[str], parent: click.Context | None): click.Context\lparse_args(ctx: click.Context, args: list[str]): list[str]\l}", shape="record", style="solid"];
"flask.exceptions.form_data_exceptions.FormDataRoutingRedirect" [color="black", fontcolor="red", label="{FormDataRoutingRedirect|\l|}", shape="record", style="solid"];
"flask.json.JSONDecoder" [color="black", fontcolor="black", label="{JSONDecoder|\l|}", shape="record", style="solid"];
"flask.json.JSONEncoder" [color="black", fontcolor="black", label="{JSONEncoder|\l|default(o: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.provider.JSONProvider" [color="black", fontcolor="black", label="{JSONProvider|\l|dump(obj: t.Any, fp: t.IO[str]): None\ldumps(obj: t.Any): str\lload(fp: t.IO[t.AnyStr]): t.Any\lloads(s: str | bytes): t.Any\lresponse(): Response\l}", shape="record", style="solid"];
"flask.json.tag.JSONTag" [color="black", fontcolor="black", label="{JSONTag|key : Optional[t.Optional[str]]\lserializer : str\l|check(value: t.Any): bool\ltag(value: t.Any): t.Any\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.views.MethodView" [color="black", fontcolor="black", label="{MethodView|\l|dispatch_request(): ft.ResponseReturnValue\l}", shape="record", style="solid"];
"flask.cli.NoAppException" [color="black", fontcolor="red", label="{NoAppException|\l|}", shape="record", style="solid"];
"flask.sessions.NullSession" [color="black", fontcolor="black", label="{NullSession|clear\lpop\lpopitem\lsetdefault\lupdate\l|}", shape="record", style="solid"];
"flask.json.tag.PassDict" [color="black", fontcolor="black", label="{PassDict|tag\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.PassList" [color="black", fontcolor="black", label="{PassList|tag\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.wrappers.Request" [color="black", fontcolor="black", label="{Request|blueprint\lblueprints\lendpoint\ljson_module\lmax_content_length\lrouting_exception : Optional[t.Optional[Exception]]\lurl_rule : Optional[t.Optional['Rule']]\lview_args : Optional[t.Optional[t.Dict[str, t.Any]]]\l|on_json_loading_failed(e: t.Optional[ValueError]): t.Any\l}", shape="record", style="solid"];
"flask.ctx.RequestContext" [color="black", fontcolor="black", label="{RequestContext|app : str\lflashes : Optional[t.Optional[t.List[t.Tuple[str, str]]]]\lrequest : Optional[Request]\lsession : Optional[t.Optional['SessionMixin']]\lurl_adapter : NoneType\l|copy(): 'RequestContext'\lmatch_request(): None\lpop(exc: t.Optional[BaseException]): None\lpush(): None\l}", shape="record", style="solid"];
"flask.wrappers.Response" [color="black", fontcolor="black", label="{Response|autocorrect_location_header : bool\ldefault_mimetype : str\ljson_module\lmax_cookie_size\lstatus : NoneType\lstatus_code : NoneType\l|}", shape="record", style="solid"];
"flask.scaffold.Scaffold" [color="black", fontcolor="black", label="{Scaffold|after_request_funcs : t.Dict[ft.AppOrBlueprintKey, t.List[ft.AfterRequestCallable]]\lbefore_request_funcs : t.Dict[ft.AppOrBlueprintKey, t.List[ft.BeforeRequestCallable]]\lcli\lerror_handler_spec : t.Dict[ft.AppOrBlueprintKey, t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ft.ErrorHandlerCallable]]]\lhas_static_folder\limport_name : str\ljson_decoder : Optional[t.Union[t.Type[json.JSONDecoder], None]]\ljson_encoder : Optional[t.Union[t.Type[json.JSONEncoder], None]]\lname : str\lroot_path : Optional[t.Optional[str]]\lstatic_folder\lstatic_folder : Optional[t.Optional[t.Union[str, os.PathLike]]]\lstatic_url_path\lstatic_url_path : Optional[t.Optional[str]]\lteardown_request_funcs : t.Dict[ft.AppOrBlueprintKey, t.List[ft.TeardownCallable]]\ltemplate_context_processors : t.Dict[ft.AppOrBlueprintKey, t.List[ft.TemplateContextProcessorCallable]]\ltemplate_folder : Optional[t.Optional[str]]\lurl_default_functions : t.Dict[ft.AppOrBlueprintKey, t.List[ft.URLDefaultCallable]]\lurl_value_preprocessors : t.Dict[ft.AppOrBlueprintKey, t.List[ft.URLValuePreprocessorCallable]]\lview_functions : t.Dict[str, t.Callable]\l|add_url_rule(rule: str, endpoint: t.Optional[str], view_func: t.Optional[ft.RouteCallable], provide_automatic_options: t.Optional[bool]): None\lafter_request(f: T_after_request): T_after_request\lbefore_request(f: T_before_request): T_before_request\lcontext_processor(f: T_template_context_processor): T_template_context_processor\ldelete(rule: str): t.Callable[[T_route], T_route]\lendpoint(endpoint: str): t.Callable[[F], F]\lerrorhandler(code_or_exception: t.Union[t.Type[Exception], int]): t.Callable[[T_error_handler], T_error_handler]\lget(rule: str): t.Callable[[T_route], T_route]\lget_send_file_max_age(filename: t.Optional[str]): t.Optional[int]\ljinja_loader(): t.Optional[FileSystemLoader]\lopen_resource(resource: str, mode: str): t.IO[t.AnyStr]\lpatch(rule: str): t.Callable[[T_route], T_route]\lpost(rule: str): t.Callable[[T_route], T_route]\lput(rule: str): t.Callable[[T_route], T_route]\lregister_error_handler(code_or_exception: t.Union[t.Type[Exception], int], f: ft.ErrorHandlerCallable): None\lroute(rule: str): t.Callable[[T_route], T_route]\lsend_static_file(filename: str): 'Response'\lteardown_request(f: T_teardown): T_teardown\lurl_defaults(f: T_url_defaults): T_url_defaults\lurl_value_preprocessor(f: T_url_value_preprocessor): T_url_value_preprocessor\l}", shape="record", style="solid"];
"flask.cli.ScriptInfo" [color="black", fontcolor="black", label="{ScriptInfo|app_import_path : Optional[str \| None]\lcreate_app : Optional[t.Callable[..., 'Flask'] \| None]\ldata : t.Dict[t.Any, t.Any]\lset_debug_flag : bool\l|load_app(): 'Flask'\l}", shape="record", style="solid"];
"flask.sessions.SecureCookieSession" [color="black", fontcolor="black", label="{SecureCookieSession|accessed : bool\laccessed : bool\lmodified : bool\l|get(key: str, default: t.Any): t.Any\lsetdefault(key: str, default: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.sessions.SecureCookieSessionInterface" [color="black", fontcolor="black", label="{SecureCookieSessionInterface|digest_method : staticmethod\lkey_derivation : str\lsalt : str\lserializer\lsession_class\l|get_signing_serializer(app: 'Flask'): t.Optional[URLSafeTimedSerializer]\lopen_session(app: 'Flask', request: 'Request'): t.Optional[SecureCookieSession]\lsave_session(app: 'Flask', session: SessionMixin, response: 'Response'): None\l}", shape="record", style="solid"];
"flask.cli.SeparatedPathType" [color="black", fontcolor="black", label="{SeparatedPathType|\l|convert(value, param, ctx)\l}", shape="record", style="solid"];
"flask.sessions.SessionInterface" [color="black", fontcolor="black", label="{SessionInterface|null_session_class\lpickle_based : bool\l|get_cookie_domain(app: 'Flask'): t.Optional[str]\lget_cookie_httponly(app: 'Flask'): bool\lget_cookie_name(app: 'Flask'): str\lget_cookie_path(app: 'Flask'): str\lget_cookie_samesite(app: 'Flask'): str\lget_cookie_secure(app: 'Flask'): bool\lget_expiration_time(app: 'Flask', session: SessionMixin): t.Optional[datetime]\lis_null_session(obj: object): bool\lmake_null_session(app: 'Flask'): NullSession\lopen_session(app: 'Flask', request: 'Request'): t.Optional[SessionMixin]\lsave_session(app: 'Flask', session: SessionMixin, response: 'Response'): None\lshould_set_cookie(app: 'Flask', session: SessionMixin): bool\l}", shape="record", style="solid"];
"flask.sessions.SessionMixin" [color="black", fontcolor="black", label="{SessionMixin|accessed : bool\lmodified : bool\lnew : bool\lpermanent\l|}", shape="record", style="solid"];
"flask.json.tag.TagBytes" [color="black", fontcolor="black", label="{TagBytes|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TagDateTime" [color="black", fontcolor="black", label="{TagDateTime|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TagDict" [color="black", fontcolor="black", label="{TagDict|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TagMarkup" [color="black", fontcolor="black", label="{TagMarkup|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TagTuple" [color="black", fontcolor="black", label="{TagTuple|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TagUUID" [color="black", fontcolor="black", label="{TagUUID|key : str\l|check(value: t.Any): bool\lto_json(value: t.Any): t.Any\lto_python(value: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.json.tag.TaggedJSONSerializer" [color="black", fontcolor="black", label="{TaggedJSONSerializer|default_tags : list\lorder : t.List[JSONTag]\ltags : t.Dict[str, JSONTag]\l|dumps(value: t.Any): str\lloads(value: str): t.Any\lregister(tag_class: t.Type[JSONTag], force: bool, index: t.Optional[int]): None\ltag(value: t.Any): t.Dict[str, t.Any]\luntag(value: t.Dict[str, t.Any]): t.Any\l}", shape="record", style="solid"];
"flask.debughelpers.UnexpectedUnicodeError" [color="black", fontcolor="red", label="{UnexpectedUnicodeError|\l|}", shape="record", style="solid"];
"flask.views.View" [color="black", fontcolor="black", label="{View|decorators : t.ClassVar[t.List[t.Callable]]\linit_every_request : t.ClassVar[bool]\lmethods : Optional[t.ClassVar[t.Optional[t.Collection[str]]]]\lprovide_automatic_options : Optional[t.ClassVar[t.Optional[bool]]]\l|as_view(name: str): ft.RouteCallable\ldispatch_request(): ft.ResponseReturnValue\l}", shape="record", style="solid"];
"flask.ctx._AppCtxGlobals" [color="black", fontcolor="black", label="{_AppCtxGlobals|\l|get(name: str, default: t.Optional[t.Any]): t.Any\lpop(name: str, default: t.Any): t.Any\lsetdefault(name: str, default: t.Any): t.Any\l}", shape="record", style="solid"];
"flask.signals._FakeSignal" [color="black", fontcolor="black", label="{_FakeSignal|connect\lconnect_via\lconnected_to\ldisconnect\lhas_receivers_for\lname : str\lreceivers_for\ltemporarily_connected_to\l|send(): t.Any\l}", shape="record", style="solid"];
"flask.globals._FakeStack" [color="black", fontcolor="black", label="{_FakeStack|cv : ContextVar[t.Any]\lname : str\ltop\l|pop(): t.Any\lpush(obj: t.Any): None\l}", shape="record", style="solid"];
"flask.helpers.locked_cached_property" [color="black", fontcolor="black", label="{locked_cached_property|lock : _RLock, RLock\l|}", shape="record", style="solid"];
"flask.debughelpers.attach_enctype_error_multidict.newcls" [color="black", fontcolor="black", label="{newcls|\l|}", shape="record", style="solid"];
"flask.app.Flask" -> "flask.scaffold.Scaffold" [arrowhead="empty", arrowtail="none"];
"flask.blueprints.Blueprint" -> "flask.scaffold.Scaffold" [arrowhead="empty", arrowtail="none"];
"flask.cli.FlaskGroup" -> "flask.cli.AppGroup" [arrowhead="empty", arrowtail="none"];
"flask.json.provider.DefaultJSONProvider" -> "flask.json.provider.JSONProvider" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.PassDict" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.PassList" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagBytes" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagDateTime" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagDict" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagMarkup" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagTuple" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagUUID" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.sessions.NullSession" -> "flask.sessions.SecureCookieSession" [arrowhead="empty", arrowtail="none"];
"flask.sessions.SecureCookieSession" -> "flask.sessions.SessionMixin" [arrowhead="empty", arrowtail="none"];
"flask.sessions.SecureCookieSessionInterface" -> "flask.sessions.SessionInterface" [arrowhead="empty", arrowtail="none"];
"flask.views.MethodView" -> "flask.views.View" [arrowhead="empty", arrowtail="none"];
"flask.app.Flask" -> "flask.testing.AppTestingUtil" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flask_app", style="solid"];
"flask.cli.AppGroup" -> "flask.scaffold.Scaffold" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cli", style="solid"];
"flask.config.Config" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"flask.config.Config" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_class", style="solid"];
"flask.config.ConfigAttribute" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="testing", style="solid"];
"flask.config.ConfigAttribute" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="secret_key", style="solid"];
"flask.config.ConfigAttribute" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="permanent_session_lifetime", style="solid"];
"flask.ctx._AppCtxGlobals" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="app_ctx_globals_class", style="solid"];
"flask.ctx._AppCtxGlobals" -> "flask.ctx.AppContext" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g", style="solid"];
"flask.json.provider.JSONProvider" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="json", style="solid"];
"flask.json.tag.TaggedJSONSerializer" -> "flask.sessions.SecureCookieSessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="serializer", style="solid"];
"flask.sessions.NullSession" -> "flask.sessions.SessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="null_session_class", style="solid"];
"flask.sessions.SecureCookieSession" -> "flask.sessions.SecureCookieSessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session_class", style="solid"];
"flask.sessions.SessionInterface" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session_interface", style="solid"];
"flask.templating.Environment" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_environment", style="solid"];
"flask.wrappers.Request" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="request_class", style="solid"];
"flask.wrappers.Response" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="response_class", style="solid"];
}
